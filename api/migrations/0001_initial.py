# Generated by Django 5.2.7 on 2025-10-31 08:19

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='TokenInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_addr', models.CharField(db_index=True, help_text='Actual token contract address', max_length=42, unique=True)),
                ('pair_addr', models.CharField(help_text='Pair contract address', max_length=42)),
                ('token_create_ts', models.DateTimeField(help_text='Token creation timestamp')),
                ('lp_create_ts', models.DateTimeField(help_text='Liquidity pool creation timestamp')),
                ('pair_idx', models.IntegerField(help_text='Token index in pair (0 or 1)')),
                ('pair_type', models.CharField(help_text='Router type used by the pair', max_length=50)),
            ],
            options={
                'db_table': 'token_info',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='HoneypotProcessedData',
            fields=[
                ('token_info', models.OneToOneField(db_column='token_addr_idx', on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='honeypot_processed', serialize=False, to='api.tokeninfo')),
                ('total_buy_cnt', models.IntegerField()),
                ('total_sell_cnt', models.IntegerField()),
                ('total_owner_sell_cnt', models.IntegerField()),
                ('total_non_owner_sell_cnt', models.IntegerField()),
                ('imbalance_rate', models.FloatField()),
                ('total_windows', models.IntegerField()),
                ('windows_with_activity', models.IntegerField()),
                ('total_burn_events', models.IntegerField()),
                ('total_mint_events', models.IntegerField()),
                ('s_owner_count', models.IntegerField()),
                ('total_sell_vol', models.DecimalField(decimal_places=18, max_digits=78)),
                ('total_buy_vol', models.DecimalField(decimal_places=18, max_digits=78)),
                ('total_owner_sell_vol', models.DecimalField(decimal_places=18, max_digits=78)),
                ('total_sell_vol_log', models.FloatField()),
                ('total_buy_vol_log', models.FloatField()),
                ('total_owner_sell_vol_log', models.FloatField()),
                ('liquidity_event_mask', models.IntegerField()),
                ('max_sell_share', models.FloatField()),
                ('unique_sellers', models.IntegerField()),
                ('unique_buyers', models.IntegerField()),
                ('consecutive_sell_block_windows', models.IntegerField()),
                ('total_sell_block_windows', models.IntegerField()),
            ],
            options={
                'db_table': 'honeypot_processed_data',
            },
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_addr', models.CharField(db_index=True, help_text='Analyzed token contract address', max_length=42, unique=True)),
                ('risk_score', models.FloatField(help_text='Final scam score calculated after analysis')),
                ('scam_types', models.JSONField(help_text='List of detected scam categories')),
                ('victim_insights', models.JSONField(help_text='List of scam indicators found in analysis')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, help_text='Analysis completion timestamp')),
                ('token_info', models.OneToOneField(help_text='Link to token information', on_delete=django.db.models.deletion.CASCADE, related_name='result', to='api.tokeninfo')),
            ],
            options={
                'db_table': 'result',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HolderInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('holder_addr', models.CharField(help_text='Holder wallet address', max_length=42)),
                ('balance', models.DecimalField(decimal_places=18, help_text='Token balance held by this address', max_digits=78)),
                ('rel_to_total', models.CharField(help_text='Percentage of total supply held', max_length=20)),
                ('token_info', models.ForeignKey(db_column='token_addr_idx', on_delete=django.db.models.deletion.CASCADE, related_name='holders', to='api.tokeninfo')),
            ],
            options={
                'db_table': 'holder_info',
                'ordering': ['-balance'],
                'indexes': [models.Index(fields=['token_info', '-balance'], name='holder_info_token_a_948d23_idx')],
            },
        ),
        migrations.CreateModel(
            name='ExitProcessedData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('win_id', models.IntegerField(help_text='Window identifier (per token)')),
                ('win_start_ts', models.DateTimeField()),
                ('win_start_block', models.IntegerField()),
                ('win_tx_count', models.IntegerField()),
                ('win_blocks', models.IntegerField()),
                ('lp_start_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('lp_end_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('lp_drop_amount_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('burn_frac_5s', models.FloatField()),
                ('reserve_token_start_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('reserve_token_end_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('reserve_token_drop_frac_5s', models.FloatField()),
                ('lp_mint_amount_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('lp_burn_amount_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('mint_events_5s', models.IntegerField()),
                ('burn_events_5s', models.IntegerField()),
                ('swap_events_5s', models.IntegerField()),
                ('time_since_last_mint_sec_5s', models.FloatField()),
                ('lp_peak_drop_frac_5s', models.FloatField()),
                ('lp_start_peak_frac_5s', models.FloatField()),
                ('swap_base_sell_volume_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('swap_base_buy_volume_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('swap_quote_sell_volume_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('swap_quote_buy_volume_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('cum_base_minted_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('cum_base_burned_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('cum_quote_minted_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('cum_quote_burned_5s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('holder_top1_supply_pct', models.FloatField()),
                ('holder_pair_supply_pct', models.FloatField()),
                ('holder_top20_supply_pct', models.FloatField()),
                ('mint_sell_swap_count_60s', models.IntegerField()),
                ('mint_sell_base_volume_60s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('mint_sell_base_abs_max_60s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('mint_sell_to_reserve_max_ratio_60s', models.FloatField()),
                ('mint_sell_to_reserve_avg_ratio_60s', models.FloatField()),
                ('mint_sell_quote_volume_60s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('event_count_600s', models.IntegerField()),
                ('burn_events_600s', models.IntegerField()),
                ('mint_events_600s', models.IntegerField()),
                ('swap_events_600s', models.IntegerField()),
                ('lp_start_600s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('lp_drop_frac_600s', models.FloatField()),
                ('lp_cum_drawdown_600s', models.FloatField()),
                ('lp_burn_amount_600s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('lp_mint_amount_600s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('time_since_last_mint_sec_600s', models.FloatField()),
                ('consecutive_drop_windows_600s', models.IntegerField()),
                ('reserve_token_start_600s', models.DecimalField(decimal_places=18, max_digits=78)),
                ('price_ratio_start_600s', models.FloatField()),
                ('price_ratio_end_600s', models.FloatField()),
                ('token_info', models.ForeignKey(db_column='token_addr_idx', on_delete=django.db.models.deletion.CASCADE, related_name='exit_processed', to='api.tokeninfo')),
            ],
            options={
                'db_table': 'exit_processed_data',
                'ordering': ['token_info', 'win_id'],
                'indexes': [models.Index(fields=['token_info', 'win_id'], name='exit_proces_token_a_13274b_idx'), models.Index(fields=['win_start_ts'], name='exit_proces_win_sta_ff5a9b_idx')],
                'unique_together': {('token_info', 'win_id')},
            },
        ),
        migrations.CreateModel(
            name='AnalysisJob',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('token_addr', models.CharField(db_index=True, help_text='Token address being analyzed', max_length=42)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('collecting_token', 'Collecting Token Info'), ('collecting_pair', 'Collecting Pair Events'), ('collecting_holder', 'Collecting Holder Info'), ('preprocessing', 'Preprocessing'), ('analyzing_honeypot_da', 'Honeypot Dynamic Analysis'), ('analyzing_honeypot_ml', 'Honeypot ML Analysis'), ('analyzing_exit_ml', 'Exit Scam ML Analysis'), ('aggregating', 'Aggregating Results'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=30)),
                ('current_step', models.CharField(blank=True, help_text='Current processing step description', max_length=100)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('error_step', models.CharField(blank=True, max_length=50, null=True)),
                ('token_info', models.ForeignKey(blank=True, help_text='Link to TokenInfo after collection', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='jobs', to='api.tokeninfo')),
            ],
            options={
                'db_table': 'analysis_job',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['token_addr', '-created_at'], name='analysis_jo_token_a_999a8f_idx'), models.Index(fields=['status', '-created_at'], name='analysis_jo_status_bc2820_idx')],
            },
        ),
        migrations.CreateModel(
            name='PairEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(db_index=True, help_text='Event timestamp (ISO format)')),
                ('block_number', models.IntegerField(help_text='Block number of the transaction')),
                ('tx_hash', models.CharField(help_text='Transaction hash', max_length=66)),
                ('tx_from', models.CharField(help_text='Transaction sender address', max_length=42)),
                ('tx_to', models.CharField(help_text='Transaction recipient address', max_length=42)),
                ('evt_idx', models.IntegerField(help_text='Event log index in transaction')),
                ('evt_type', models.CharField(help_text='Event type (Mint, Burn, Sync, Swap, etc.)', max_length=20)),
                ('evt_log', models.JSONField(help_text='Preprocessed event log in JSON format')),
                ('token0', models.CharField(help_text='Token0 address in pair', max_length=42)),
                ('token1', models.CharField(help_text='Token1 address in pair', max_length=42)),
                ('reserve0', models.DecimalField(decimal_places=18, help_text='Current reserve of token0', max_digits=78)),
                ('reserve1', models.DecimalField(decimal_places=18, help_text='Current reserve of token1', max_digits=78)),
                ('lp_total_supply', models.DecimalField(decimal_places=18, help_text='Current LP total supply', max_digits=78)),
                ('token_info', models.ForeignKey(db_column='token_addr_idx', on_delete=django.db.models.deletion.CASCADE, related_name='pair_events', to='api.tokeninfo')),
            ],
            options={
                'db_table': 'pair_evt',
                'ordering': ['timestamp', 'evt_idx'],
                'indexes': [models.Index(fields=['token_info', 'timestamp'], name='pair_evt_token_a_8294b9_idx'), models.Index(fields=['block_number'], name='pair_evt_block_n_7471a4_idx')],
            },
        ),
    ]
